{"version":3,"file":"aiChat.js","sourceRoot":"","sources":["../src/aiChat.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAC,WAAW,EAAC,MAAM,eAAe,CAAC;AAE1C,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;AACzD,aAAa,CAAC,SAAS,GAAG;;;;;CAKzB,CAAC;AAEF,MAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;AAC3D,eAAe,CAAC,SAAS,GAAG;IACxB,WAAW;;CAEd,CAAC;AAEF,MAAM,OAAO,MAAO,SAAQ,WAAW;IAGrC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC,WAAW,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACvF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAW,CAAC,cAAc,CAAC,mBAAmB,CAAgB,CAAC;QACzF,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IACxE,CAAC;IAED,0DAA0D;IAC1D,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,IAAI,GAAG,CAAC,QAAQ;QACd,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,KAAK,kBAAkB;QAC3B,OAAO,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAED,wBAAwB,CAAC,QAAgB,EAAE,QAAgB,EAAE,QAAgB;QAC3E,IAAI,QAAQ,KAAK,QAAQ;YAAE,OAAO;QAClC,IAAI,QAAQ,KAAK,KAAK;YAAE,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;IAC9C,CAAC;CACF;AAED,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC","sourcesContent":["import {ChatView} from './views/chat/chatView';\nimport {aiChatStyle} from './aiChatStyle';\n\nconst insertKeyView = document.createElement('template');\ninsertKeyView.innerHTML = `\n  <div>\n    Insert key:\n    <input></input><button>Submit</button>\n  </div>\n`;\n\nconst defaultTemplate = document.createElement('template');\ndefaultTemplate.innerHTML = `\n  ${aiChatStyle}\n  <div id=\"ai-chat-container\"></div>\n`;\n\nexport class AiChat extends HTMLElement {\n  _containerRef: HTMLElement;\n\n  constructor() {\n    super();\n    this.attachShadow({mode: 'open'}).appendChild(defaultTemplate.content.cloneNode(true));\n    this._containerRef = this.shadowRoot!.getElementById('ai-chat-container') as HTMLElement;\n    this._containerRef.appendChild(insertKeyView.content.cloneNode(true));\n  }\n\n  // getter and setter needed for property change monitoring\n  get key(): string {\n    return this.key;\n  }\n\n  set key(newValue) {\n    console.log('key has changed!');\n    new ChatView(this._containerRef, newValue);\n  }\n\n  static get observedAttributes() {\n    return ['key'];\n  }\n\n  attributeChangedCallback(property: string, oldValue: string, newValue: string) {\n    if (oldValue === newValue) return;\n    if (property === 'key') this.key = newValue;\n  }\n}\n\ncustomElements.define('ai-chat', AiChat);\n\n// The following type makes it easier for other projects to use this component with TypeScript\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'ai-chat': AiChat;\n  }\n}\n"]}